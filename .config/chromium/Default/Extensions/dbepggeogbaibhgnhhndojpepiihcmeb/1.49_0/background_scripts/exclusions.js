// Generated by CoffeeScript 1.8.0
(function() {
  var Exclusions, RegexpCache, parseLegacyRules, root;

  root = typeof exports !== "undefined" && exports !== null ? exports : window;

  RegexpCache = {
    cache: {},
    get: function(pattern) {
      var regexp;
      if (regexp = this.cache[pattern]) {
        return regexp;
      } else {
        return this.cache[pattern] = (function() {
          try {
            return new RegExp("^" + pattern.replace(/\*/g, ".*") + "$");
          } catch (_error) {
            return /^$/;
          }
        })();
      }
    }
  };

  root.Exclusions = Exclusions = {
    rules: Settings.get("exclusionRules"),
    getRule: function(url) {
      var rule, _i, _len, _ref;
      _ref = this.rules;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        rule = _ref[_i];
        if (url.match(RegexpCache.get(rule.pattern))) {
          return rule;
        }
      }
      return null;
    },
    setRules: function(rules) {
      this.rules = rules.filter(function(rule) {
        return rule && rule.pattern;
      });
      return Settings.set("exclusionRules", this.rules);
    },
    postUpdateHook: function(rules) {
      return this.rules = rules;
    },
    updateOrAdd: function(newRule) {
      var seen;
      seen = false;
      this.rules.push(newRule);
      return this.setRules(this.rules.map(function(rule) {
        if (rule.pattern === newRule.pattern) {
          if (seen) {
            return null;
          } else {
            return seen = newRule;
          }
        } else {
          return rule;
        }
      }));
    },
    remove: function(pattern) {
      return this.setRules(this.rules.filter(function(rule) {
        return rule && rule.pattern !== pattern;
      }));
    }
  };

  if (false && Settings.has("excludedUrlsBackup")) {
    Settings.clear("exclusionRules");
    Settings.set("excludedUrls", Settings.get("excludedUrlsBackup"));
  }

  if (!Settings.has("exclusionRules") && Settings.has("excludedUrls")) {
    parseLegacyRules = function(lines) {
      var line, parse, _i, _len, _ref, _results;
      _ref = lines.trim().split("\n").map(function(line) {
        return line.trim();
      });
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        line = _ref[_i];
        if (line.length && line.indexOf("#") !== 0 && line.indexOf('"') !== 0) {
          parse = line.split(/\s+/);
          _results.push({
            pattern: parse[0],
            passKeys: parse.slice(1).join("")
          });
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };
    Exclusions.setRules(parseLegacyRules(Settings.get("excludedUrls")));
    if (!Settings.has("excludedUrlsBackup")) {
      Settings.set("excludedUrlsBackup", Settings.get("excludedUrls"));
    }
    Settings.clear("excludedUrls");
  }

}).call(this);
