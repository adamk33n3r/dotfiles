# Define different ports for different environments
# This is so that multiple (and separate) node servers can coexist
# on the same physical machine without interfering

# Environment is defined in the systemctl service
# These ports must match the ports defined in nginx.conf
port = switch process.env.NODE_ENV
    when 'local' then 3000
    when 'demo'  then 3001
    when 'dev'   then 3002
    when 'pre'   then 3003
    when 'prod'  then 3004

http    = require('http')
sockjs  = require('sockjs').createServer()
request = require('request')
url     = require('url')

redis = require('redis')

# Client authorization
#io.use (socket, next)->
#    data = socket.request
#
#    # Client must send cookies or it's not valid
#    if data.headers.cookie
#        hostname = url.parse(data.headers.origin).hostname
#
#        # Make the request
#        request
#            uri: "http://#{hostname}/home/info"
#            method: 'POST'
#            followAllRedirects: true
#            strictSSL: false
#            headers:
#                cookie: data.headers.cookie
#            encoding: 'utf8'
#            json: true
#        , (error, response, json)->
#            if !error and response.statusCode == 200
#                socket.request.user_id = json.id
#                next()
#            else
#                next(new Error("request #{error} #{response?.statusCode}"))
#    else
#        next(new Error('No cookie sent'))

# All the things that happen in here happen PER CONNECTION
sockjs.on 'connection', (socket)->
    # If we got this far, then we are authorized
    console.log 'new connection'

    # Cookie authorization
    socket.on 'data', (uid)->
        console.log "User #{uid} connected"
        socket.user_id = uid

    ## Subscribe to redis
    sub = redis.createClient()
    sub.psubscribe("*")

    # Receive a message from Redis
    sub.on "pmessage", (pattern, channel, data)->
        data = JSON.parse(data)

        # Build object for sending
        sendData = JSON.stringify
            channel: channel
            data: data.message

        if data.user_id

            # Private messages sent only to us
            if parseInt(data.user_id) == parseInt(socket.user_id)
                console.log "Sending message to #{socket.user_id}: #{sendData}"
                socket.write sendData
        else
            # Public messages sent to everyone
            console.log "Sending message to everyone: #{sendData}"
            socket.write sendData

    # Client disconnects (this may not work?)
    socket.on "close", ()->
        console.log "client #{socket.user_id} disconnected"

        # Unsubscribe from redis
        sub.punsubscribe("*")
        sub.quit()

server = http.createServer()
sockjs.installHandlers(server, {prefix:'/ws'})
server.listen(port, '0.0.0.0')
